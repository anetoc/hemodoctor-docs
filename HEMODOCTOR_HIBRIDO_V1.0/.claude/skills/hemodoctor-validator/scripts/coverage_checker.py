#!/usr/bin/env python3
"""
HemoDoctor Coverage Checker
Ensures all syndromes have corresponding triggers in next_steps_engine
"""

import yaml
import sys
from pathlib import Path
from typing import Set, Dict, List


class CoverageChecker:
    """Check coverage between syndromes and triggers"""
    
    def __init__(self):
        self.syndromes = set()
        self.triggers_by_syndrome = {}
        self.uncovered_syndromes = set()
    
    def load_syndromes(self, syndrome_file: str) -> bool:
        """Load syndromes from 03_syndromes_hybrid.yaml"""
        try:
            with open(syndrome_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            
            if 'syndromes' not in data:
                print(f"‚ùå No 'syndromes' key in {syndrome_file}")
                return False
            
            for syndrome in data['syndromes']:
                if 'id' in syndrome:
                    self.syndromes.add(syndrome['id'])
            
            print(f"‚úì Loaded {len(self.syndromes)} syndromes")
            return True
        
        except Exception as e:
            print(f"‚ùå Failed to load syndromes: {e}")
            return False
    
    def load_triggers(self, trigger_file: str) -> bool:
        """Load triggers from 09_next_steps_engine_hybrid.yaml"""
        try:
            with open(trigger_file, 'r', encoding='utf-8') as f:
                data = yaml.safe_load(f)
            
            if 'triggers' not in data:
                print(f"‚ùå No 'triggers' key in {trigger_file}")
                return False
            
            for trigger in data['triggers']:
                trigger_id = trigger.get('id', 'unknown')
                syndromes = trigger.get('syndromes', [])
                
                for syndrome_id in syndromes:
                    if syndrome_id not in self.triggers_by_syndrome:
                        self.triggers_by_syndrome[syndrome_id] = []
                    self.triggers_by_syndrome[syndrome_id].append(trigger_id)
            
            print(f"‚úì Loaded {len(data['triggers'])} triggers")
            print(f"‚úì Triggers reference {len(self.triggers_by_syndrome)} syndromes")
            return True
        
        except Exception as e:
            print(f"‚ùå Failed to load triggers: {e}")
            return False
    
    def check_coverage(self) -> bool:
        """Check if all syndromes have triggers"""
        self.uncovered_syndromes = self.syndromes - set(self.triggers_by_syndrome.keys())
        
        print("\n" + "="*60)
        print("COVERAGE REPORT")
        print("="*60)
        
        covered = len(self.syndromes) - len(self.uncovered_syndromes)
        coverage_pct = (covered / len(self.syndromes) * 100) if self.syndromes else 0
        
        print(f"\nüìä Coverage: {covered}/{len(self.syndromes)} syndromes ({coverage_pct:.1f}%)")
        
        if self.uncovered_syndromes:
            print(f"\n‚ùå UNCOVERED SYNDROMES ({len(self.uncovered_syndromes)}):")
            for syndrome_id in sorted(self.uncovered_syndromes):
                print(f"  ‚Ä¢ {syndrome_id}")
            print("\n‚ö†Ô∏è  These syndromes need triggers in 09_next_steps_engine_hybrid.yaml")
        else:
            print("\n‚úÖ All syndromes have triggers!")
        
        # Show syndromes with multiple triggers
        multi_trigger = {s: t for s, t in self.triggers_by_syndrome.items() if len(t) > 1}
        if multi_trigger:
            print(f"\n‚ÑπÔ∏è  Syndromes with multiple triggers ({len(multi_trigger)}):")
            for syndrome_id, trigger_ids in sorted(multi_trigger.items()):
                print(f"  ‚Ä¢ {syndrome_id}: {len(trigger_ids)} triggers")
        
        print("="*60)
        return len(self.uncovered_syndromes) == 0
    
    def generate_missing_triggers(self, output_file: str = None):
        """Generate template triggers for uncovered syndromes"""
        if not self.uncovered_syndromes:
            return
        
        template = []
        template.append("# MISSING TRIGGERS - Add to 09_next_steps_engine_hybrid.yaml")
        template.append("# Generated by coverage_checker.py\n")
        
        for syndrome_id in sorted(self.uncovered_syndromes):
            template.append(f"- id: trigger-{syndrome_id.lower()}")
            template.append(f"  when: \"TODO: Add condition for {syndrome_id}\"")
            template.append(f"  syndromes: [{syndrome_id}]")
            template.append("  suggest:")
            template.append("    - level: priority")
            template.append(f"      test: \"TODO: Add test for {syndrome_id}\"")
            template.append(f"      rationale: \"TODO: Add rationale\"")
            template.append("      cost: low")
            template.append("      turnaround: fast")
            template.append(f"      prereq: \"CBC\"")
            template.append("")
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("\n".join(template))
            print(f"\nüíæ Missing trigger templates saved to: {output_file}")
        else:
            print("\n" + "\n".join(template))


def main():
    if len(sys.argv) < 3:
        print("Usage: python coverage_checker.py <syndromes.yaml> <next_steps.yaml> [output_template.yaml]")
        print("\nExample:")
        print("  python coverage_checker.py 03_syndromes_hybrid.yaml 09_next_steps_engine_hybrid.yaml")
        print("  python coverage_checker.py 03_syndromes_hybrid.yaml 09_next_steps_engine_hybrid.yaml missing_triggers.yaml")
        sys.exit(1)
    
    syndrome_file = sys.argv[1]
    trigger_file = sys.argv[2]
    output_file = sys.argv[3] if len(sys.argv) > 3 else None
    
    checker = CoverageChecker()
    
    print("üîç Checking syndrome coverage...\n")
    
    if not checker.load_syndromes(syndrome_file):
        sys.exit(1)
    
    if not checker.load_triggers(trigger_file):
        sys.exit(1)
    
    success = checker.check_coverage()
    
    if not success and output_file:
        checker.generate_missing_triggers(output_file)
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
