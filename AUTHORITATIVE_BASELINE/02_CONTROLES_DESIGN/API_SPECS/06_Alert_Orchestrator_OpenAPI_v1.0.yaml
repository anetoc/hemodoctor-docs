openapi: 3.1.0
info:
  title: HemoDoctor Alert Orchestrator API
  version: 1.0.0
  description: |
    **Internal Class C microservice** for clinical alert generation and prioritization.
    
    **IEC 62304 Classification:** Class C (CRITICAL alerts trigger immediate clinical actions)
    
    **Responsibilities:**
    - Generate alerts based on rules + ML output
    - Prioritize alerts (CRITICAL > HIGH > MEDIUM > LOW)
    - Alert throttling (max 3 CRITICAL per session)
    - Notification routing (UI, email, SMS)
    
    **Traceability:** SDD-001 ยง3.7 | REQ-HD-001, RISK-HD-102 (SRS-001)

servers:
  - url: http://alert-orchestrator-classc:8082/api/internal

security:
  - BearerAuth: []

tags:
  - name: Alert Generation
  - name: Health

paths:
  /alerts/generate:
    post:
      summary: Generate clinical alert
      operationId: generateAlert
      tags:
        - Alert Generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [case_id, ml_result, rules_result]
              properties:
                case_id: {type: string, format: uuid}
                ml_result:
                  type: object
                  properties:
                    risk_score: {type: number}
                    top_diagnoses: {type: array, items: {type: object}}
                rules_result:
                  type: object
                  properties:
                    alert_level: {type: string, enum: [CRITICAL, HIGH, MEDIUM, LOW, NONE]}
                    recommended_actions: {type: array, items: {type: string}}
      responses:
        '200':
          description: Alert generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  alerts:
                    type: array
                    items:
                      type: object
                      properties:
                        alert_id: {type: string, format: uuid}
                        level: {type: string, enum: [CRITICAL, HIGH, MEDIUM, LOW]}
                        message: {type: string}
                        suggested_actions: {type: array, items: {type: string}}
                        triggered_at: {type: string, format: date-time}

  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, enum: [healthy]}
                  safety_class: {type: string, enum: [C]}

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
