openapi: 3.1.0
info:
  title: HemoDoctor Audit Service API
  version: 1.0.0
  description: |
    **Internal Class A microservice** for immutable audit trail (WORM logs).
    
    **IEC 62304 Classification:** Class A (logging only, no clinical decisions)
    
    **Responsibilities:**
    - Immutable audit trail (Write Once Read Many)
    - Log all clinical decisions, user actions, system events
    - Cryptographic signatures for log integrity
    - Retention management (5+ years per LGPD)
    
    **Traceability:** SDD-001 ยง3.9 | REQ-HD-004, NFR-004 (SRS-001)

servers:
  - url: http://audit-service:9000/api/internal

security:
  - BearerAuth: []

tags:
  - name: Audit Logging
  - name: Health

paths:
  /audit/log:
    post:
      summary: Write audit log entry (append-only)
      operationId: writeAuditLog
      tags: [Audit Logging]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [event_type, service, order_id]
              properties:
                event_type: {type: string, enum: [EVENT_INGEST, EVENT_VALIDATE, EVENT_SCORE, EVENT_ALERT, EVENT_DECISION, EVENT_OVERRIDE, BOUNDARY_CROSS]}
                service: {type: string}
                order_id: {type: string}
                case_id: {type: string, format: uuid}
                user_id: {type: string}
                payload: {type: object}
      responses:
        '201':
          description: Log entry created
          content:
            application/json:
              schema:
                type: object
                properties:
                  log_id: {type: integer, format: int64}
                  signature: {type: string, description: "SHA-256 signature"}

  /audit/query:
    get:
      summary: Query audit logs
      operationId: queryAuditLogs
      tags: [Audit Logging]
      parameters:
        - name: case_id
          in: query
          schema: {type: string, format: uuid}
        - name: order_id
          in: query
          schema: {type: string}
        - name: start_time
          in: query
          schema: {type: string, format: date-time}
        - name: end_time
          in: query
          schema: {type: string, format: date-time}
      responses:
        '200':
          description: Audit logs retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    log_id: {type: integer}
                    timestamp: {type: string, format: date-time}
                    event_type: {type: string}
                    service: {type: string}
                    signature: {type: string}

  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, enum: [healthy]}
                  safety_class: {type: string, enum: [A]}

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
