openapi: 3.1.0
info:
  title: HemoDoctor Ingestion Service API
  version: 1.0.0
  description: |
    **Internal Class B microservice** for CBC data ingestion and ETL processing.
    
    **IEC 62304 Classification:** Class B (data processing, no diagnostic logic)
    
    **Responsibilities:**
    - Ingest CBC data from LIS/HIS systems
    - Support multiple formats: HL7 v2, FHIR R4, CSV, JSON
    - Data parsing and initial validation
    - Forward to Validation Service
    
    **Traceability:** SDD-001 ยง3.2 | REQ-HD-002 (SRS-001)

servers:
  - url: http://ingestion-service:8000/api/internal

security:
  - BearerAuth: []

tags:
  - name: Ingestion
  - name: Health

paths:
  /ingest:
    post:
      summary: Ingest CBC data
      operationId: ingestCBC
      tags: [Ingestion]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [external_order_id, patient, cbc]
              properties:
                external_order_id: {type: string}
                patient:
                  type: object
                  properties:
                    age: {type: integer}
                    sex: {type: string, enum: [M, F, Other]}
                    pregnancy: {type: boolean}
                cbc:
                  type: object
                  properties:
                    hb: {type: object, properties: {value: {type: number}, unit: {type: string}}}
                    mcv: {type: object, properties: {value: {type: number}, unit: {type: string}}}
                    rdw: {type: object, properties: {value: {type: number}, unit: {type: string}}}
      responses:
        '202':
          description: CBC data accepted for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  case_id: {type: string, format: uuid}
                  order_id: {type: string}
                  status: {type: string, enum: [ACCEPTED]}

  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, enum: [healthy]}
                  safety_class: {type: string, enum: [B]}

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
